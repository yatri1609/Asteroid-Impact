# Create the treemap with hex color values
treemap(value_sector,
index = "issuer.sector",
vSize = "TotalValue",
vColor = "TotalValue",
type="index",
palette = color_palette,  # Use the color palette defined above
title = "Sector Distribution",
fontsize.labels = 10
)
data <-senator_investments_df
# Convert the transaction date to a Date object
data$txDate <- as.Date(data$txDate, "%Y-%m-%d")
data$Month <- floor_date(data$txDate, "month")
data$Month <- FLOOR_DATE(data$txDate, "month")
data$Month <- floor_date(data$txDate, "month")
data$value <- as.numeric(as.character(data$value))
monthly_transaction_value <- data %>%
group_by(Month) %>%
summarise(TotalValue = sum(value, na.rm = TRUE))
#visualization
library(dplyr)
data <-senator_investments_df
# Convert the transaction date to a Date object
data$txDate <- as.Date(data$txDate, "%Y-%m-%d")
data$Month <- floor_date(data$txDate, "month")
library(tidyverse)
library(tidyquant)
library(PerformanceAnalytics)
library(xts)
library(lubridate)
library(Quandl)
library(riingo)
library(httr)
library(tidyr)
library(dplyr)
library(jsonlite)
library(httr)
library(purrr)
library(dplyr)
data <-senator_investments_df
# Convert the transaction date to a Date object
data$txDate <- as.Date(data$txDate, "%Y-%m-%d")
data$Month <- floor_date(data$txDate, "month")
data$value <- as.numeric(as.character(data$value))
monthly_transaction_value <- data %>%
group_by(Month) %>%
summarise(TotalValue = sum(value, na.rm = TRUE))
ggplot(monthly_transaction_value, aes(x = Month, y = TotalValue)) +
geom_line() +
geom_point() +
scale_x_date(date_breaks = "1 month", date_labels = "%b %Y") +
scale_y_continuous(labels = scales::comma) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Monthly Total Transaction Value of Senators",
x = "Date",
y = "Total Transaction Value")
monthly_transaction_value <- data %>%
mutate(AdjustedValue = if_else(txType == "sell", -value, value)) %>%
group_by(Month) %>%
summarise(TotalValue = sum(AdjustedValue, na.rm = TRUE))
ggplot(monthly_transaction_value, aes(x = Month, y = TotalValue)) +
geom_line() +
geom_point() +
scale_x_date(date_breaks = "1 month", date_labels = "%b %Y") +
scale_y_continuous(labels = scales::comma) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Monthly Total Transaction Value of Senators",
x = "Date",
y = "Total Transaction Value")
library(httr)
library(jsonlite)
library(dplyr)
library(ggplot2)
library(plotly)
## GET LAP DATA
response_16 <- GET('https://api.openf1.org/v1/laps?session_key=latest&driver_number=16')
parsed_data_16 <- fromJSON(content(response_16, 'text'))
print(parsed_data_16)
#filter out mini-sector speeds
df_filtered_16 <- subset(parsed_data_16, select = -c(segments_sector_1,
segments_sector_2,
segments_sector_3))
head(df_filtered_16)
ggplot(df_filtered_16, aes(x=lap_number, y=lap_duration)) +
geom_line() +
geom_point() +
theme_minimal() +
labs(title="Lap Duration Over Laps", x="Lap Number", y="Lap Duration (seconds)")
## GET STINT DATA
stint_response <- GET('https://api.openf1.org/v1/stints?session_key=latest&driver_number=16')
stint_parsed_data <- fromJSON(content(stint_response, 'text'))
head(stint_parsed_data)
# Mapping compounds to colors
compound_colors <- setNames(c("orange", "red", "green"), c("MEDIUM", "SOFT", "HARD"))
# Assign colors based on compound in stint data
stint_parsed_data$color <- compound_colors[stint_parsed_data$compound]
# Function to get tire color for each lap
get_tire_color_for_lap <- function(lap_number) {
for (i in 1:nrow(stint_parsed_data)) {
if (lap_number >= stint_parsed_data$lap_start[i] && lap_number <= stint_parsed_data$lap_end[i]) {
return(stint_parsed_data$color[i])
}
}
return(NA) # Return NA if no stint matches
}
# Apply function to each lap in lap_data
df_filtered_16$tire_color <- sapply(df_filtered_16$lap_number, get_tire_color_for_lap)
# Plotting
ggplot(df_filtered_16, aes(x = lap_number, y = lap_duration, color = tire_color, group = 1)) +
geom_line() +
geom_point() +
scale_color_identity() + # Use the actual colors specified in the data
theme_minimal() +
labs(title = "Lap Duration Over Laps by Tire Compound",
x = "Lap Number",
y = "Lap Duration (seconds)",
color = "Tire Compound")
# Convert the colors to a more descriptive label for the legend
df_filtered_16$tire_type <- ifelse(df_filtered_16$tire_color == "orange", "MEDIUM",
ifelse(df_filtered_16$tire_color == "red", "SOFT", "HARD"))
# Plotting with Plotly
fig <- plot_ly(data = df_filtered_16, x = ~lap_number, y = ~lap_duration, type = 'scatter', mode = 'lines+markers',
color = ~tire_type, colors = c('MEDIUM' = 'orange', 'SOFT' = 'red', 'HARD' = 'green'),
marker = list(size = 10))
fig <- fig %>% layout(title = 'Lap Duration Over Laps by Tire Compound',
xaxis = list(title = 'Lap Number'),
yaxis = list(title = 'Lap Duration (seconds)'),
legend = list(title = list(text = 'Tire Compound')))
# Show plot
fig
# carlos
## GET LAP DATA
response_55 <- GET('https://api.openf1.org/v1/laps?session_key=latest&driver_number=55')
parsed_data_55 <- fromJSON(content(response_55, 'text'))
print(parsed_data_55)
#filter out mini-sector speeds
df_filtered_55 <- subset(parsed_data_55, select = -c(segments_sector_1,
segments_sector_2,
segments_sector_3))
head(df_filtered_55)
ggplot(df_filtered_55, aes(x=lap_number, y=lap_duration)) +
geom_line() +
geom_point() +
theme_minimal() +
labs(title="Lap Duration Over Laps", x="Lap Number", y="Lap Duration (seconds)")
## GET STINT DATA
stint_response_55 <- GET('https://api.openf1.org/v1/stints?session_key=latest&driver_number=55')
stint_parsed_data_55 <- fromJSON(content(stint_response_55, 'text'))
head(stint_parsed_data_55)
# Mapping compounds to colors
compound_colors <- setNames(c("orange", "red", "green"), c("MEDIUM", "SOFT", "HARD"))
# Assign colors based on compound in stint data
stint_parsed_data_55$color <- compound_colors[stint_parsed_data_55$compound]
# Function to get tire color for each lap
get_tire_color_for_lap <- function(lap_number) {
for (i in 1:nrow(stint_parsed_data_55)) {
if (lap_number >= stint_parsed_data_55$lap_start[i] && lap_number <= stint_parsed_data_55$lap_end[i]) {
return(stint_parsed_data_55$color[i])
}
}
return(NA) # Return NA if no stint matches
}
# Apply function to each lap in lap_data
df_filtered_55$tire_color <- sapply(df_filtered_55$lap_number, get_tire_color_for_lap)
# Plotting
ggplot(df_filtered_55, aes(x = lap_number, y = lap_duration, color = tire_color, group = 1)) +
geom_line() +
geom_point() +
scale_color_identity() + # Use the actual colors specified in the data
theme_minimal() +
labs(title = "Lap Duration Over Laps by Tire Compound",
x = "Lap Number",
y = "Lap Duration (seconds)",
color = "Tire Compound")
# Convert the colors to a more descriptive label for the legend
df_filtered_55$tire_type <- ifelse(df_filtered_55$tire_color == "orange", "MEDIUM",
ifelse(df_filtered_55$tire_color == "red", "SOFT", "HARD"))
# Plotting with Plotly
df_filtered_16$name_tire <- paste(df_filtered_16$tire_type, '- Leclerc')
df_filtered_55$name_tire <- paste(df_filtered_55$tire_type, '- Sainz')
# Plotting with Plotly, adding two traces
fig <- plot_ly()
# Adding dataset 1 with a specific style
fig <- fig %>% add_trace(data = df_filtered_16, x = ~lap_number, y = ~lap_duration, type = 'scatter', mode = 'lines+markers',
color = ~tire_type, colors = c('MEDIUM' = 'orange', 'SOFT' = 'red', 'HARD' = 'green'),
marker = list(size = 10), line = list(dash = 'solid'),
name = ~name_tire)
# Adding dataset 2 with a different style
fig <- fig %>% add_trace(data = df_filtered_55, x = ~lap_number, y = ~lap_duration, type = 'scatter', mode = 'lines+markers',
color = ~tire_type, colors = c('MEDIUM' = 'orange4', 'SOFT' = 'red4', 'HARD' = 'green4'),
marker = list(size = 10, symbol = 'square'), line = list(dash = 'dot'),
name = ~name_tire)
# Adjusting the layout
fig <- fig %>% layout(title = 'Lap Duration Over Laps by Tire Compound',
xaxis = list(title = 'Lap Number'),
yaxis = list(title = 'Lap Duration (seconds)'),
legend = list(title = list(text = 'Tire Compound')))
# Show plot
fig
setwd("C:/Users/itsme/OneDrive/Desktop/Personal Projects/Asteroid-Impact")
#since there are two values of Torino scale 0 and (*),
#I will convert (*) to NA since (*) is also a notation used to denote Torino Scale
impact_data$Maximum.Torino.Scale[impact_data$Maximum.Torino.Scale == "(*)" | is.na(impact_data$Maximum.Torino.Scale)] <- NA
#import libraries
library(tidyr)
library(dplyr)
library(ggplot2)
library(corrplot)
processAsteroid <- function(impact_data_file, orbit_data_file){
#read data from csv
impact_data <- read.csv(impact_data_file, header=TRUE)
orbit_data <- read.csv(orbit_data_file, header=TRUE)
#column names of the dataset
colnames(impact_data)
colnames(orbit_data)
#Data transformations
#data structure
str(impact_data)
str(orbit_data)
#split Year range into Period Start and Period End
impact_data <- impact_data %>%
separate("Year Range", into = c("Period Start", "Period End"), sep = "-") %>%
mutate(
"Period Start" = as.integer("Period Start"),
"Period End" = as.integer("Period End")
)
#convert Maximum Torino Scale to numeric
unique(impact_data$Maximum.Torino.Scale)
#convert chr to numeric value
impact_data$Maximum.Torino.Scale <- as.numeric(impact_data$Maximum.Torino.Scale)
#add period field based on period start and end
impact_data$Period <- impact_data$Period.End - impact_data$Period.Start
#since there are two values of Torino scale 0 and (*),
#I will convert (*) to NA since (*) is also a notation used to denote Torino Scale
impact_data$Maximum.Torino.Scale[impact_data$Maximum.Torino.Scale == "(*)" | is.na(impact_data$Maximum.Torino.Scale)] <- NA
#convert chr to numeric value for Asteroid Magnitude
orbit_data$Asteroid.Magnitude <- as.numeric(orbit_data$Asteroid.Magnitude)
#missing values
paste("Number of null valies in impact data:", (sum(is.na(impact_data)))*100/nrow(impact_data),"%")
paste("Number of null valies in orbit data:", (sum(is.na(orbit_data)))*100/nrow(orbit_data),"%")
write.csv(impact_data, "./Data/processed_impacts.csv")
write.csv(orbit_data, "./Data/processed_orbits.csv")
}
processAsteroid("./Data/impacts_data_sentry.csv","./Data/orbits.csv")
#import libraries
library(tidyr)
library(dplyr)
library(ggplot2)
library(corrplot)
processAsteroid <- function(impact_data_file, orbit_data_file){
#read data from csv
impact_data <- read.csv(impact_data_file, header=TRUE)
orbit_data <- read.csv(orbit_data_file, header=TRUE)
#column names of the dataset
colnames(impact_data)
colnames(orbit_data)
#Data transformations
#data structure
str(impact_data)
str(orbit_data)
#split Year range into Period Start and Period End
impact_data <- impact_data %>%
separate("Year.Range..", into = c("Period Start", "Period End"), sep = "-") %>%
mutate(
"Period Start" = as.integer("Period Start"),
"Period End" = as.integer("Period End")
)
#convert Maximum Torino Scale to numeric
unique(impact_data$Maximum.Torino.Scale)
#convert chr to numeric value
impact_data$Maximum.Torino.Scale <- as.numeric(impact_data$Maximum.Torino.Scale)
#add period field based on period start and end
impact_data$Period <- impact_data$Period.End - impact_data$Period.Start
#since there are two values of Torino scale 0 and (*),
#I will convert (*) to NA since (*) is also a notation used to denote Torino Scale
impact_data$Maximum.Torino.Scale[impact_data$Maximum.Torino.Scale == "(*)" | is.na(impact_data$Maximum.Torino.Scale)] <- NA
#convert chr to numeric value for Asteroid Magnitude
orbit_data$Asteroid.Magnitude <- as.numeric(orbit_data$Asteroid.Magnitude)
#missing values
paste("Number of null valies in impact data:", (sum(is.na(impact_data)))*100/nrow(impact_data),"%")
paste("Number of null valies in orbit data:", (sum(is.na(orbit_data)))*100/nrow(orbit_data),"%")
write.csv(impact_data, "./Data/processed_impacts.csv")
write.csv(orbit_data, "./Data/processed_orbits.csv")
}
processAsteroid("./Data/impacts_data_sentry.csv","./Data/orbits.csv")
#import libraries
library(tidyr)
library(dplyr)
library(ggplot2)
library(corrplot)
processAsteroid <- function(impact_data_file, orbit_data_file){
#read data from csv
impact_data <- read.csv(impact_data_file, header=TRUE)
orbit_data <- read.csv(orbit_data_file, header=TRUE)
#column names of the dataset
colnames(impact_data)
colnames(orbit_data)
#Data transformations
#data structure
str(impact_data)
str(orbit_data)
#split Year range into Period Start and Period End
impact_data <- impact_data %>%
separate("Year.Range..", into = c("Period Start", "Period End"), sep = "-") %>%
mutate(
"Period Start" = as.integer("Period Start"),
"Period End" = as.integer("Period End")
)
#convert Maximum Torino Scale to numeric
unique(impact_data$Torino.Scale..max..)
#convert chr to numeric value
impact_data$Torino.Scale..max.. <- as.numeric(impact_data$Torino.Scale..max..)
#add period field based on period start and end
impact_data$Period <- impact_data$Period.End - impact_data$Period.Start
#since there are two values of Torino scale 0 and (*),
#I will convert (*) to NA since (*) is also a notation used to denote Torino Scale
impact_data$Torino.Scale..max..[impact_data$Torino.Scale..max.. == "(*)" | is.na(impact_data$Torino.Scale..max..)] <- NA
#convert chr to numeric value for Asteroid Magnitude
orbit_data$Asteroid.Magnitude <- as.numeric(orbit_data$Asteroid.Magnitude)
#missing values
paste("Number of null valies in impact data:", (sum(is.na(impact_data)))*100/nrow(impact_data),"%")
paste("Number of null valies in orbit data:", (sum(is.na(orbit_data)))*100/nrow(orbit_data),"%")
write.csv(impact_data, "./Data/processed_impacts.csv")
write.csv(orbit_data, "./Data/processed_orbits.csv")
}
processAsteroid("./Data/impacts_data_sentry.csv","./Data/orbits.csv")
processAsteroid("./Data/impacts_data_sentry.csv","./Data/orbits.csv")
#read data from csv
impact_data <- read.csv(./Data/impacts_data_sentry.csv, header=TRUE)
#read data from csv
impact_data <- read.csv('./Data/impacts_data_sentry.csv', header=TRUE)
#column names of the dataset
colnames(impact_data)
#data structure
str(impact_data)
#split Year range into Period Start and Period End
impact_data <- impact_data %>%
separate("Year.Range..", into = c("Period Start", "Period End"), sep = "-") %>%
mutate(
"Period Start" = as.integer("Period Start"),
"Period End" = as.integer("Period End")
)
impact_data <- impact_data %>%
separate("Year.Range..", into = c("Period Start", "Period End"), sep = "-")
impact_data
#read data from csv
impact_data <- read.csv('./Data/impacts_data_sentry.csv', header=TRUE)
#data structure
head(impact_data)
impact_data <- impact_data %>%
separate("Year.Range..", into = c("Period Start", "Period End"), sep = "-")
impact_data
impact_data <- impact_data %>%
# separate("Year.Range..", into = c("Period Start", "Period End"), sep = "-") %>%
mutate(
"Period Start" = as.integer("Period Start"),
"Period End" = as.integer("Period End")
)
#data structure
str(impact_data)
#read data from csv
impact_data <- read.csv('./Data/impacts_data_sentry.csv', header=TRUE)
#column names of the dataset
colnames(impact_data)
#split Year range into Period Start and Period End
impact_data <- impact_data %>%
separate("Year.Range..", into = c("Period Start", "Period End"), sep = "-")
#data structure
str(impact_data)
#convert Maximum Torino Scale to numeric
unique(impact_data$Torino.Scale..max..)
impact_data$Torino.Scale..max.. <- as.numeric(impact_data$Torino.Scale..max..)
impact_data$`Period Start` <- as.numeric(impact_data$`Period Start`)
impact_data$`Period End` <- as.numeric(impact_data$`Period End`)
#data structure
str(impact_data)
#add period field based on period start and end
impact_data$Period <- impact_data$`Period End` - impact_data$`Period Start`
#since there are two values of Torino scale 0 and (*),
#I will convert (*) to NA since (*) is also a notation used to denote Torino Scale
impact_data$Torino.Scale..max..[impact_data$Torino.Scale..max.. == "(*)" | is.na(impact_data$Torino.Scale..max..)] <- NA
#missing values
paste("Number of null valies in impact data:", (sum(is.na(impact_data)))*100/nrow(impact_data),"%")
#missing values
paste("Percentage of null valies in impact data:", (sum(is.na(impact_data$Potential.Impacts..)))*100/nrow(impact_data),"%")
#missing values
paste("Percentage of null valies in impact data:", (sum(is.na(impact_data)))*100/nrow(impact_data),"%")
#import libraries
library(tidyr)
library(dplyr)
library(ggplot2)
library(corrplot)
processAsteroid <- function(impact_data_file, orbit_data_file){
#read data from csv
impact_data <- read.csv(impact_data_file, header=TRUE)
orbit_data <- read.csv(orbit_data_file, header=TRUE)
#column names of the dataset
colnames(impact_data)
colnames(orbit_data)
#Data transformations
#data structure
str(impact_data)
str(orbit_data)
#split Year range into Period Start and Period End
impact_data <- impact_data %>%
separate("Year.Range..", into = c("Period Start", "Period End"), sep = "-")
#convert Maximum Torino Scale to numeric
unique(impact_data$Torino.Scale..max..)
#convert chr to numeric value
impact_data$Torino.Scale..max.. <- as.numeric(impact_data$Torino.Scale..max..)
impact_data$`Period Start` <- as.numeric(impact_data$`Period Start`)
impact_data$`Period End` <- as.numeric(impact_data$`Period End`)
#add period field based on period start and end
impact_data$Period <- impact_data$`Period End` - impact_data$`Period Start`
#since there are two values of Torino scale 0 and (*),
#I will convert (*) to NA since (*) is also a notation used to denote Torino Scale
impact_data$Torino.Scale..max..[impact_data$Torino.Scale..max.. == "(*)" | is.na(impact_data$Torino.Scale..max..)] <- NA
#convert chr to numeric value for Asteroid Magnitude
orbit_data$Asteroid.Magnitude <- as.numeric(orbit_data$Asteroid.Magnitude)
#missing values
paste("Percentage of null valies in impact data:", (sum(is.na(impact_data)))*100/nrow(impact_data),"%")
paste("Percentage of null valies in orbit data:", (sum(is.na(orbit_data)))*100/nrow(orbit_data),"%")
write.csv(impact_data, "./Data/processed_impacts.csv")
write.csv(orbit_data, "./Data/processed_orbits.csv")
}
processAsteroid("./Data/impacts_data_sentry.csv","./Data/orbits.csv")
#import processed files
data_impacts <- read.csv("./Data/processed_impacts.csv", header=TRUE)
data_impacts
str(data_impacts)
head(data_impacts)
library(dplyr)
library(tidyr)
library(tidyverse)
library(ggplot2)
library(plotly)
library(corrplot)
library(webshot)
#import processed files
data_impacts <- read.csv("./Data/processed_impacts.csv", header=TRUE)
data_orbits <- read.csv("./Data/processed_orbits.csv", header=TRUE)
str(data_impacts)
head(data_impacts)
str(data_orbits)
head(data_orbits)
##### Asteroid features by object name #####
data_impacts_long <- data_impacts %>%
mutate("Estimated.Diameter..km.*100" = Estimated.Diameter..km.*100) %>%
select(Object.Designation..,"Estimated.Diameter..km.*100",H..mag.,Vinfinity..km.s.) %>%
pivot_longer(cols = -Object.Designation.., names_to = "Metric", values_to = "Value")
AsteroidFeaturesByObject <- plot_ly(data_impacts_long,
x = ~Value,
y = ~reorder(Object.Designation.., Value),
color = ~Metric, type = 'bar',
orientation = 'h') %>%
layout(yaxis = list(title = 'Asteroids'),
xaxis = list(title = 'Metrics'),
barmode = 'stack',
title = 'Asteroid features by Object',
legend = list(title = list(text = 'Metric')))
AsteroidFeaturesByObject
##### Asteroid Impact Risk by Year #####
asteroid_counts <- data_impacts %>%
group_by(Period.End) %>%
summarise(count = n())
# Plot the stacked bar chart
plot_ly(asteroid_counts, x = ~Period.End, y = ~count, type = 'bar',
colors = blues9) %>%
layout(title = 'Asteroid Impact Risk by Year',
xaxis = list(title = 'Year'),
yaxis = list(title = 'Count of Asteroids'),
colorway = RColorBrewer::brewer.pal(8, "Set2"))
##### Average Cumulative Impact Probability by Period Start #####
average_impact <- data_impacts %>%
group_by(Period.Start) %>%
summarise(Average_Cumulative_Impact_Probability = mean(Impact.Probability..cumulative., na.rm = TRUE))
plot_ly(average_impact, x = ~Period.Start, y = ~Average_Cumulative_Impact_Probability,
type = 'scatter', mode = 'lines+markers') %>%
layout(title = "Average Cumulative Impact Probability by Year",
xaxis = list(title = "Year"),
yaxis = list(title = "Average Cumulative Impact Probability"))
##### Possible Impacts vs Asteroid features #####
plot_ly(data_impacts, x=~Vinfinity..km.s., y=~Potential.Impacts..,
type='scatter', mode='markers') %>%
layout(title = "Possible Impacts by Asteroid Velocity",
xaxis = list(title = "Asteroid Velocity in km/s"),
yaxis = list(title = "Possible Impacts"))
plot_ly(data_impacts, x=~H..mag., y=~Potential.Impacts..,
type='scatter', mode='markers') %>%
layout(title = "Possible Impacts by Asteroid Magnitude",
xaxis = list(title = "Asteroid Magnitude"),
yaxis = list(title = "Possible Impacts"))
plot_ly(data_impacts, x=~Estimated.Diameter..km., y=~Potential.Impacts..,
type='scatter', mode='markers') %>%
layout(title = "Possible Impacts by Asteroid Diameter",
xaxis = list(title = "Asteroid Diameter in km"),
yaxis = list(title = "Possible Impacts"))
##### Orbit data classification #####
asteroid_category_count <- data_orbits %>%
group_by(Object.Classification) %>%
summarise(count = n()) %>%
mutate(color = ifelse(grepl("Hazard", Object.Classification), "red", "lightblue"))
plot_ly(asteroid_category_count, x=~Object.Classification, y=~count,
type='bar', marker=list(color=~color)) %>%
layout(title = "Asteroids per Classification",
xaxis = list(title = "Asteroid Classification"),
yaxis = list(title = "Number of Asteroids"))
#get the unique classification name
unique(data_orbits$Object.Classification)
data_impacts
View(data_impacts)
